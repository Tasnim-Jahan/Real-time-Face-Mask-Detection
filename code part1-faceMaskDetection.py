# -*- coding: utf-8 -*-
"""Face mask Detection-part 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfaEYVReM5PJwPeiEqsQX8xV7TiwJr6B
"""

!nvidia-smi

from google.colab import drive
drive.mount('/content/drive')

!pip install tensorflow

import tensorflow as tf
tf.__version__

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask = os.listdir('/content/drive/MyDrive/dataset/with_mask')
print(with_mask[0:5])
print(with_mask[-5:])

without_mask = os.listdir('/content/drive/MyDrive/dataset/without_mask')
print(without_mask[0:5])
print(without_mask[-5:])

print('Number of images with mask:',len(with_mask))
print('Number of images without mask:',len(without_mask))

"""**Creating labels for the two classes of images**

with mask --> 1


without mask --> 0
"""

#Create the labels

with_mask_labels = [1]*len(with_mask)

without_mask_labels = [0]*len(without_mask)

print(with_mask_labels[0:5])
print(without_mask_labels[0:5])

print(len(with_mask))
print(len(without_mask))

labels = with_mask_labels + without_mask_labels
print(len(labels))

print(labels[0:5])
print(labels[-5:])

"""**Displaying the images**"""

#Display with mask image
img = mpimg.imread('/content/drive/MyDrive/dataset/with_mask/0_0_0 copy 3.png')
imgplot = plt.imshow(img)
plt.show()

#Display without mask image
img = mpimg.imread('/content/drive/MyDrive/dataset/without_mask/1_0_zhourunfa_0127.jpg')
imgplot = plt.imshow(img)
plt.show()

"""Image Processing

1. Resize the images
2.Convert the images to numpy array
"""

#convert image to numpy arrays

with_mask_path = '/content/drive/MyDrive/dataset/with_mask/'

data = []

for img_file in with_mask:
  image = Image.open(with_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

without_mask_path = '/content/drive/MyDrive/dataset/without_mask/'

for img_file in without_mask:
  image = Image.open(without_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

len(data)
len(labels)

data[0]

data[0].shape

type(data[0])

#converting image list and label list to numpy arrays

x = np.array(data)
y = np.array(labels)

type(x)
type(y)

print(x.shape)
print(y.shape)

print(y)

"""Train Test Split"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 2)

print(x.shape, x_train.shape, x_test.shape)

# Scaling the data

x_train_scaled = x_train/255
x_test_scaled = x_test/255

x_train[0]

x_train_scaled[0]

"""**Building a Convolutional Neural Network**"""

import tensorflow as tf
from tensorflow import keras

num_of_classes = 2

model = keras.Sequential()

model.add(keras.layers.Conv2D(32, kernel_size=(3,3), activation = 'relu', input_shape=(128, 128, 3)))
model.add(keras.layers.MaxPooling2D(pool_size = (2,2)))

model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation = 'relu'))
model.add(keras.layers.MaxPooling2D(pool_size = (2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128, activation = 'relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(64, activation = 'relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(num_of_classes, activation = 'sigmoid'))

#Complie the neural network

model.compile(optimizer = 'adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = 'acc')
model.summary()

#trining the neural network
history = model.fit(x_train_scaled, y_train, validation_split = 0.1, epochs = 20)

"""**Model Evaluation**"""

loss, accuracy = model.evaluate(x_test_scaled, y_test)
print('test Accuracy = ', accuracy)

h = history

# plot the loss value
plt.plot(h.history['loss'], label ='train loss')
plt.plot(h.history['val_loss'], label = 'validation_loss')
plt.legend()
plt.show()

# plot the accuracy value
plt.plot(h.history['acc'], label ='train accuracy')
plt.plot(h.history['val_acc'], label = 'validation_accuracy')
plt.legend()
plt.show()

"""**Predictive System**"""

input_image_path = input('Path of the image to be predicted: ')
input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image,(128,128))
input_image_scaled = input_image_resize/255
input_image_reshaped = np.reshape(input_image_scaled,[1,128,128,3])

input_prediction = model.predict(input_image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)
print(input_pred_label)

if input_pred_label ==1:
  print('The person in the image is wearing mask')
else:
  print('The person in the image is not wearing mask')

input_image_path = input('Path of the image to be predicted: ')
input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image,(128,128))
input_image_scaled = input_image_resize/255
input_image_reshaped = np.reshape(input_image_scaled,[1,128,128,3])

input_prediction = model.predict(input_image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)
print(input_pred_label)

if input_pred_label ==1:
  print('The person in the image is wearing mask')
else:
  print('The person in the image is not wearing mask')

